面向对象的编程语言有封装、继承 、抽象、多态等 4 个主要的特征。
1、封装：
    将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变。
    封装是保证软件部件具有优良的模块性的基础， 封装的目标就是要实现软件部件的“高内聚、低耦合”， 防止程序相互依赖性而带来的变动影响。
在面向对象的编程语言中， 对象是封装的最基本单位， 面向对象的封装比传统语言的封装更为清晰、更为有力。
面向对象的封装就是把描述一个对象的属性和行为的代码封装在一个“模块”中，也就是一个类中，属性用变量定义，行为用方法进行定义，
方法可以直接访问同一个对象中的属性。通常情况下， 只要记住让变量和访问这个变量的方法放在一起，将一个类中的成员变量全部定义成私有的，
只有这个类自己的方法才可以访问到这些成员变量，这就基本上实现对象的封装，就很容易找出要分配到这个类上的方法了，就基本上算是会面向对象的编程了。
把握一个原则：把对同一事物进行操作的方法和相关的方法放在同一个类中，把方法和它操作的数据放在同一个类中
2、抽象
    抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处。
并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。
3、继承
    在定义和实现一个类的时候，可以在一个已经存在的类的基础上来进行，把这个已经存在的类所定义的内容作为新类的内容，
并可以加入若干新的内容，或者修改原来类中的方法使得新类更适合特殊的需要。这就是集成。
    继承是子类自动共享父类数据和方法的机制，提高了软件的可重用性和课扩展性。
4、多态
    多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，
即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中的实现方法，必须在由程序运行期间才能决定。
    java中实现多态是靠父类或接口定义的引用变量可以指向子类或具体实现类的实例对象，而程序调用的方法在运行期才动态绑定，
也就是引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。