Overload 是重载的意思， Override 是覆盖的意思，也就是重写。
重载 Overload 表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数
个数或类型不同）。
重写 Override 表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实
例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖
了，这也是面向对象编程的多态性的一种表现。子类覆盖父类的方法时，只能比父类抛出更少的异常，或
者是抛出父类抛出的异常的子异常，因为子类可以解决父类的一些问题，不能比父类有更多的问题。子类
方法的访问权限只能比父类的更大，不能更小。如果父类的方法是 private 类型，那么，子类则不存在覆盖
的限制，相当于子类中增加了一个全新的方法。

1、Overloaded 的方法是否可以改变返回值的类型?
    如果两个Overloaded的方法的参数列表不一样，他们的返回类型也可以不一样。
    如果两个Overloaded的方法的参数列表完全一样，那么如果他们的返回类型不一样，此时就不是方法的重载，而是两个完全不同的方法。


override 可以翻译为覆盖，从字面就可以知道，它是覆盖了一个方法并且对其重写，以求达
到不同的作用。对我们来说最熟悉的覆盖就是对接口方法的实现，在接口中一般只是对方法
进行了声明，而我们在实现时，就需要实现接口声明的所有方法。除了这个典型的用法以外，
我们在继承中也可能会在子类覆盖父类中的方法。在覆盖要注意以下的几点：
1、覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；
2、覆盖的方法的返回值必须和被覆盖的方法的返回一致；
3、覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；
4、被覆盖的方法不能为 private，否则在其子类中只是新定义了一个方法，并没有对其进行
覆盖。


overload 对我们来说可能比较熟悉，可以翻译为重载，它是指我们可以定义一些名称相同
的方法，通过定义不同的输入参数来区分这些方法，然后再调用时， VM 就会根据不同的参
数样式，来选择合适的方法执行。在使用重载要注意以下的几点：
1、在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，不
同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是 fun(int,float)，
但是不能为 fun(int,int)）；
2、不能通过访问权限、返回类型、抛出的异常进行重载；
3、方法的异常类型和数目不会对重载造成影响；
4、对于继承来说，如果某一方法在父类中是访问权限是 priavte，那么就不能
在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重
载的效果。